"""
Export preview component for Risk Panel dashboard.

This module provides an integrated export preview that shows how risk analysis
will appear in generated reports with real-time updates.
"""

from __future__ import annotations

from typing import Dict, List, Optional

import dash_bootstrap_components as dbc
from dash import dcc, html


def create_export_preview(
    risk_data: Dict[str, any] = None,
    scenario_results: Dict[str, any] = None,
    preview_format: str = "pdf",
) -> html.Div:
    """
    Create the export preview component.

    Args:
        risk_data: Current risk analysis data
        scenario_results: Current scenario calculation results
        preview_format: Export format to preview (pdf, word, excel)

    Returns:
        Dash HTML component containing the export preview
    """
    if risk_data is None:
        risk_data = {}

    if scenario_results is None:
        scenario_results = {}

    return html.Div([
        # Preview header
        html.Div([
            html.H6("Export Preview", className="mb-2"),
            html.Small(f"Format: {preview_format.upper()}", className="text-muted"),
        ], className="d-flex justify-content-between align-items-center mb-3"),

        # Format selector
        html.Div([
            html.Label("Preview Format:"),
            dcc.Dropdown(
                id="preview-format-selector",
                options=[
                    {"label": "PDF Report", "value": "pdf"},
                    {"label": "Word Document", "value": "word"},
                    {"label": "Excel Workbook", "value": "excel"},
                ],
                value=preview_format,
                className="mb-3",
            ),
        ]),

        # Preview container
        html.Div([
            # Preview iframe or content area
            html.Div([
                create_preview_content(risk_data, scenario_results, preview_format),
            ], id="preview-content", className="border rounded p-3", style={"height": "600px", "overflow": "auto"}),

            # Preview controls
            html.Div([
                html.Hr(className="my-3"),
                dbc.ButtonGroup([
                    dbc.Button(
                        "Refresh Preview",
                        id="refresh-preview-btn",
                        color="primary",
                        size="sm",
                    ),
                    dbc.Button(
                        "Download",
                        id="download-preview-btn",
                        color="secondary",
                        size="sm",
                    ),
                ], className="me-2"),
                html.Small(
                    "Preview updates automatically as you modify scenarios",
                    className="text-muted",
                ),
            ], className="mt-3"),
        ]),
    ])


def create_preview_content(
    risk_data: Dict[str, any],
    scenario_results: Dict[str, any],
    format_type: str,
) -> html.Div:
    """
    Create preview content based on format type.

    Args:
        risk_data: Current risk analysis data
        scenario_results: Current scenario calculation results
        format_type: Export format type

    Returns:
        HTML component with preview content
    """
    if format_type == "pdf":
        return create_pdf_preview(risk_data, scenario_results)
    elif format_type == "word":
        return create_word_preview(risk_data, scenario_results)
    elif format_type == "excel":
        return create_excel_preview(risk_data, scenario_results)
    else:
        return create_default_preview(risk_data, scenario_results)


def create_pdf_preview(risk_data: Dict[str, any], scenario_results: Dict[str, any]) -> html.Div:
    """Create PDF preview content."""
    return html.Div([
        # Report header
        html.Div([
            html.H4("Risk & Resilience Analysis Report", className="text-center mb-4"),
            html.P("Generated by Aker Property Model", className="text-center text-muted"),
        ]),

        # Executive summary
        html.Div([
            html.H5("Executive Summary"),
            html.P("This report provides a comprehensive analysis of geographic hazard exposures and insurance scenario modeling for the selected market/asset."),
        ], className="mb-4"),

        # Risk multipliers section
        html.Div([
            html.H5("Risk Multipliers & Impact Analysis"),
            create_preview_multipliers_table(scenario_results),
        ], className="mb-4"),

        # Map section
        html.Div([
            html.H5("Geographic Hazard Visualization"),
            html.Div([
                html.Iframe(
                    src="/api/exports/risk-map-preview",
                    width="100%",
                    height="300px",
                    style={"border": "1px solid #ddd", "border-radius": "4px"},
                ),
            ]),
        ], className="mb-4"),

        # Impact summary
        html.Div([
            html.H5("Impact Summary"),
            dbc.Row([
                dbc.Col([
                    html.H6("Exit Cap Impact"),
                    html.H3(f"{scenario_results.get('exit_cap_bps_delta', 0):+.0f} bps", className="text-danger"),
                ], md=6),
                dbc.Col([
                    html.H6("Contingency Impact"),
                    html.H3(f"{scenario_results.get('contingency_pct_delta', 0):+.1f}%", className="text-warning"),
                ], md=6),
            ]),
        ], className="mb-4"),

        # Appendix
        html.Div([
            html.H5("Appendix: Data Sources & Methodology"),
            html.P("This analysis is based on the following data sources and methodologies:"),
            html.Ul([
                html.Li("Geographic hazard data from USGS, NOAA, and FEMA"),
                html.Li("Insurance scenario modeling using proprietary risk algorithms"),
                html.Li("Market data from Census Bureau and commercial sources"),
            ]),
        ]),
    ])


def create_word_preview(risk_data: Dict[str, any], scenario_results: Dict[str, any]) -> html.Div:
    """Create Word document preview content."""
    return html.Div([
        # Document header
        html.Div([
            html.H3("Risk & Resilience Analysis", className="text-center mb-4"),
            html.P("Investment Memorandum Supplement", className="text-center text-muted"),
        ]),

        # Risk analysis section
        html.Div([
            html.H4("Risk Assessment"),
            html.P("The following analysis evaluates geographic hazard exposures and insurance scenario impacts:"),
            create_preview_multipliers_table(scenario_results),
        ], className="mb-4"),

        # Scenario analysis
        html.Div([
            html.H4("Insurance Scenario Analysis"),
            html.P("Scenario modeling results show the following impacts on underwriting:"),
            html.Ul([
                html.Li(f"Exit cap adjustment: {scenario_results.get('exit_cap_bps_delta', 0):+.0f} basis points"),
                html.Li(f"Contingency requirement: {scenario_results.get('contingency_pct_delta', 0):+.1f}% adjustment"),
            ]),
        ]),
    ])


def create_excel_preview(risk_data: Dict[str, any], scenario_results: Dict[str, any]) -> html.Div:
    """Create Excel workbook preview content."""
    return html.Div([
        # Workbook structure
        html.Div([
            html.H5("Excel Workbook Preview"),
            html.P("The following sheets will be included in the export:", className="text-muted mb-3"),
        ]),

        # Sheet list
        html.Div([
            html.H6("Available Sheets:"),
            html.Ul([
                html.Li([
                    html.Strong("Risk Summary"),
                    html.Small(" - Overall risk assessment and impact summary", className="text-muted"),
                ]),
                html.Li([
                    html.Strong("Multipliers Table"),
                    html.Small(" - Detailed risk multipliers by peril", className="text-muted"),
                ]),
                html.Li([
                    html.Strong("Geographic Data"),
                    html.Small(" - Hazard exposure data by location", className="text-muted"),
                ]),
                html.Li([
                    html.Strong("Scenario Analysis"),
                    html.Small(" - Insurance scenario modeling results", className="text-muted"),
                ]),
            ]),
        ]),

        # Sample data preview
        html.Div([
            html.H6("Sample Data Preview:"),
            create_preview_multipliers_table(scenario_results, preview=True),
        ], className="mt-3"),
    ])


def create_default_preview(risk_data: Dict[str, any], scenario_results: Dict[str, any]) -> html.Div:
    """Create default preview content."""
    return html.Div([
        html.H5("Export Preview"),
        html.P("Select a format above to preview how your risk analysis will appear in the exported report.", className="text-muted"),
        html.Div([
            html.I(className="fas fa-file-alt fa-3x text-muted mb-3"),
            html.P("Choose PDF, Word, or Excel format to see preview", className="text-muted"),
        ], className="text-center py-4"),
    ])


def create_preview_multipliers_table(
    scenario_results: Dict[str, any],
    preview: bool = False,
) -> html.Div:
    """Create preview version of multipliers table."""
    multipliers = scenario_results.get("multipliers_table", [])

    if not multipliers:
        return html.Div([
            html.P("No scenario data available", className="text-muted text-center"),
        ])

    # Create table rows
    table_rows = []
    for multiplier in multipliers[:5] if preview else multipliers:  # Limit for preview
        table_rows.append(
            html.Tr([
                html.Td(multiplier.get("peril", "Unknown").title()),
                html.Td(f"{multiplier.get('severity_idx', 0)}/100"),
                html.Td(f"{multiplier.get('base_multiplier', 0):.3f}"),
                html.Td(f"{multiplier.get('scenario_multiplier', 0):.3f}"),
                html.Td([
                    html.Span(
                        f"{multiplier.get('delta', 0):+.3f}",
                        className="badge bg-" + get_preview_delta_class(multiplier.get('delta', 0)),
                    ),
                ]),
            ])
        )

    return html.Div([
        dbc.Table([
            html.Thead(
                html.Tr([
                    html.Th("Peril"),
                    html.Th("Severity"),
                    html.Th("Base"),
                    html.Th("Scenario"),
                    html.Th("Δ"),
                ])
            ),
            html.Tbody(table_rows),
        ], bordered=True, hover=True, responsive=True, size="sm"),

        # Summary
        html.Div([
            html.Small([
                "Total Impact: ",
                html.Span(
                    f"{scenario_results.get('exit_cap_bps_delta', 0):+.0f} bps exit cap, "
                    f"{scenario_results.get('contingency_pct_delta', 0):+.1f}% contingency",
                    className="text-muted",
                ),
            ]),
        ], className="mt-2"),
    ])


def get_preview_delta_class(delta: float) -> str:
    """Get Bootstrap badge class for preview delta values."""
    if delta > 0:
        return "success"
    elif delta < 0:
        return "danger"
    else:
        return "secondary"


def register_export_preview_callbacks(app: dash.Dash) -> None:
    """Register callbacks for export preview interactions."""

    @app.callback(
        dash.Output("preview-content", "children"),
        dash.Input("preview-format-selector", "value"),
        dash.State("risk-data-store", "data"),
        dash.State("scenario-config-store", "data"),
    )
    def update_preview_format(format_type, risk_data, scenario_data):
        """Update preview content when format changes."""
        return create_preview_content(risk_data or {}, scenario_data or {}, format_type or "pdf")

    @app.callback(
        dash.Output("preview-content", "children"),
        dash.Input("refresh-preview-btn", "n_clicks"),
        dash.State("preview-format-selector", "value"),
        dash.State("risk-data-store", "data"),
        dash.State("scenario-config-store", "data"),
        prevent_initial_call=True,
    )
    def refresh_preview(n_clicks, format_type, risk_data, scenario_data):
        """Refresh preview content."""
        if n_clicks:
            return create_preview_content(risk_data or {}, scenario_data or {}, format_type or "pdf")
        return dash.no_update

    @app.callback(
        dash.Output("download-preview-btn", "disabled"),
        dash.Input("scenario-config-store", "data"),
    )
    def update_download_button(scenario_data):
        """Enable download button when scenario is configured."""
        return not bool(scenario_data)
